@use 'sass:list';
@use 'variables' as *;
@use 'themes' as *;



//% ***************  General  *************** //

// Transition
@mixin transition($property:all, $time:.3s, $function:ease-in-out) {
    transition: $property $time $function;
}


// Flexbox
@mixin flex($direction:row, $justify:center, $align:center, $gap:2rem, $wrap: nowrap) {
    display: flex;
    flex-direction: $direction;
    flex-wrap: $wrap;
    justify-content: $justify;
    align-items: $align;
    gap: $gap;
}


// Responsive Grid
@mixin responsive-grid ($size: 35rem, $gap: 2rem,$unit: 1fr) {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(min(#{$size}, 100%), $unit));
    gap: $gap;
}


// Pseudo element overlay
@mixin pseudo ($loc: before, $content: '', $bgColor: rgba(color('black'),.3)) {
    position: relative;
    isolation: isolate;

    &::#{$loc} {
        content: $content;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: -1;
        background-color: $bgColor;
        transition: $transition;
    }
}


// Cover
@mixin cover ($radius: 0){
    position: absolute;
    width: 100%;
    height: 100%;
    inset: 0;
    z-index: 1;
    border-radius: $radius;
}


// Darken Overlay
@mixin darkenOverlay ($bg: rgb(0,0,0), $opacity: 0.15, $radius:0) {
    position: relative;

    &::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1;
        background: $bg;
        border-radius: $radius;
        opacity: $opacity;
        pointer-events: none;
        user-select: none;
        backface-visibility: hidden;
    }
}


// Bg-Image
@mixin bg-image($image) {
    background-image: url(/src/assets/images/#{$image});
    background-size: cover;
    background-position: center center;
    background-repeat: no-repeat;
}


// Darken bg color
@mixin darkenBgColor ($bgColor, $amount: 6%, $color) {
    background-color: $bgColor;

    &:hover,
    &:active {
        background-color: darken($bgColor, $amount);
        color: $color;
    }
}

// Lighten bg color
@mixin lightenBgColor ($bgColor, $amount: 10%, $color) {
    background-color: $bgColor;

    &:hover,
    &:active {
        background-color: lighten($bgColor, $amount);
        color: $color;
    }
}


// Focus State
@mixin focus-state($color: color('primary.base')){

    &:focus-visible {
        outline: 3px solid transparent;
        outline-offset: 4px;
        box-shadow: 0 0 3px 2px #ffffff,
          0 0 4px 4px $color;
    }
}


// Link Underline
@mixin link-underline($color: currentColor,$origin: center) {
    position: relative;

    &::after {
      content: '';
      position: absolute;
      width: 100%;
      height: 2px;
      background-color: $color;
      left: 0;
      bottom: -5px;
      transform: scaleX(0);
      transform-origin: $origin;
      transition: $transition;
      border-radius: var(--pilled);
    }

    &:hover::after {
      transform: scaleX(1);
    }
}


// Clearfix
@mixin clearfix {

    &::after,
    &::before {
        content: "";
        display: table;
        clear: both;
    }
}


// Generate Color Custom Props
@mixin generate-color-custom-props ($map: $colors, $prefix: clr) {

    @each $color,$shades in $map{

        @if type-of($shades)=='map' {

            @each $shade,
            $tone in $shades {
                --#{$prefix}-#{$color}-#{$shade}: #{$tone};
            }
        }

        @else {
            --#{$prefix}-#{$color}: #{$shades};
        }
    }
}


// Dynamic Viewport Units
@mixin dvw($value: 100) {
    width: #{$value}vw;
    width: #{$value}dvw;
}

@mixin dvh($value: 100) {
    height: #{$value}vw;
    height: #{$value}dvw;
}


//% ***************    *************** //



//% ***************  Centering  *************** //

// Center with position //
@mixin center-pos {
    position: absolute;
    text-align: center;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}


// Center with margins //
@mixin center-mar {
    margin-left: auto;
    margin-right: auto;
}

//% ***************    *************** //



//% ***************  Components  *************** //

// Button //
%btn-standard-props {
    @include transition(all, .4s, ease);
    display: inline-block;
    text-transform: capitalize;
    letter-spacing: var(--letterSpacing-3);
    border-color: transparent;
    border-radius: var(--radius-2);
    box-shadow: shadow(lg-1);
    white-space: nowrap;
    cursor: pointer;
}


@mixin btn($bgColor: color('primary.base'), $textColor: color('gray.50'), $type: normal){

    &,
    &:link,
    &:visited {

        @extend %btn-standard-props;
        @include focus-state($bgColor);

        padding: .7em 1.5em;
        color: $textColor;

        font-size: fs(sm-2);


        @if $type == normal {
            @include darkenBgColor($bgColor,$color:$textColor);
        }

        @if $type == outlined {
            background-color: #fff;
            outline: 1px solid $bgColor;
            color: $bgColor;

            &:hover,&:active {
                background-color: $bgColor;
                color: $textColor;
            }
        }
    }
}